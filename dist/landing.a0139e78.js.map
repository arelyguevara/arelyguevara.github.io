{"version":3,"sources":["src/js/landing.js"],"names":["scene","light","renderer","windowInnerWidth","windowInnerHeight","windowOuterHeight","THREE","WebGLRenderer","antialias","setSize","window","innerWidth","innerHeight","document","body","appendChild","domElement","Scene","onRenderFcts","camera","PerspectiveCamera","position","z","y","DirectionalLight","set","add","heightMap","THREEx","Terrain","allocateHeightMap","simplexHeightMap","geometry","heightMapToPlaneGeometry","heightMapToVertexColor","material","MeshNormalMaterial","wireframe","mesh","Mesh","lookAt","Vector3","scale","x","multiplyScalar","push","delta","now","rotation","render","lastTimeMsec","requestAnimationFrame","animate","nowMsec","deltaMsec","Math","min","forEach","onRenderFct","outerHeight","addEventListener","onWindowResize","aspect","updateProjectionMatrix"],"mappings":"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","file":"landing.a0139e78.js","sourceRoot":"..","sourcesContent":["// initializes scene, light and renderer variables\nlet scene, light, renderer;\n\n// initializes window sizes \nvar windowInnerWidth = 0;\nvar windowInnerHeight = 0;\nvar windowOuterHeight = 0;\n\n// create renderer and set the size of it\nrenderer\t= new THREE.WebGLRenderer({\n\tantialias\t: true\n});\nrenderer.setSize( window.innerWidth, window.innerHeight );\n\n// appends the render to the body\ndocument.body.appendChild( renderer.domElement );\n// creates the scene\nscene\t= new THREE.Scene();\n\n// initializes empty array\nvar onRenderFcts= [];\n\n// creates a perspective camera at a certain position\ncamera\t= new THREE.PerspectiveCamera(25, window.innerWidth /    window.innerHeight, 0.1, 100);\ncamera.position.z = 15;\ncamera.position.y = 2;\n\n// sets up a light\nlight\t= new THREE.DirectionalLight('white', 1.5)\nlight.position.set(0.5, 0.5, 2)\nscene.add( light )\n\n// creates the terrain\nvar heightMap\t= THREEx.Terrain.allocateHeightMap(256,256)\nTHREEx.Terrain.simplexHeightMap(heightMap)\nvar geometry\t= THREEx.Terrain.heightMapToPlaneGeometry(heightMap)\nTHREEx.Terrain.heightMapToVertexColor(heightMap, geometry)\n\n// THREE material\nvar material\t= new THREE.MeshNormalMaterial({ wireframe: true});\nvar mesh\t= new THREE.Mesh( geometry, material );\nscene.add( mesh );\nmesh.lookAt(new THREE.Vector3(0,1,0));\n\n// scales the scalar\nmesh.scale.y\t= 3.5;\nmesh.scale.x\t= 3;\nmesh.scale.z\t= 0.20;\nmesh.scale.multiplyScalar(10);\n\n// function to be called on every render\nonRenderFcts.push(function(delta, now){\n\tmesh.rotation.x += 0.2 * delta;\n    // mesh.rotation.x = 30.65;\n})\nonRenderFcts.push(function(){\n\t// displays actual scene on page\n\trenderer.render( scene, camera );\n})\n\nvar lastTimeMsec = null;\nrequestAnimationFrame(function animate(nowMsec){\n\trequestAnimationFrame( animate );\n\tlastTimeMsec\t= lastTimeMsec || nowMsec-1000/60\n\tvar deltaMsec\t= Math.min(200 , nowMsec - lastTimeMsec)\n\tlastTimeMsec\t= nowMsec\n\tonRenderFcts.forEach(function(onRenderFct){\n\t\tonRenderFct(deltaMsec/1000, nowMsec/1000)\n\t})\n})\n\n// stores window sizes\nwindowInnerWidth = window.innerWidth;\nwindowInnerHeight = window.innerHeight;\nwindowOuterHeight = window.outerHeight;\n\n// event listener for resize with callback\nwindow.addEventListener('resize', onWindowResize)\n\n// create resize function\nfunction onWindowResize(){\n\t// basically if sizes don't match up then assign actual window sizes to the variables and updateProjectionMatrix in order to take effect \n\tif(window.innerWidth != windowInnerWidth || window.outerHeight != windowOuterHeight){\n\t  windowOuterHeight = window.outerHeight;\n\t  windowInnerWidth = window.innerWidth;\n\t  windowInnerHeight = window.innerHeight;\n  \n\t  camera.aspect = window.innerWidth / window.innerHeight;\n\t  camera.updateProjectionMatrix();\n  \n\t  renderer.setSize(window.innerWidth, window.innerHeight);\n\t}\n  }"]}