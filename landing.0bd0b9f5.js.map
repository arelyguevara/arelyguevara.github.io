{"version":3,"sources":["src/js/landing.js"],"names":["scene","light","renderer","windowInnerWidth","windowInnerHeight","windowOuterHeight","THREE","WebGLRenderer","antialias","setSize","window","innerWidth","innerHeight","document","body","appendChild","domElement","Scene","onRenderFcts","camera","PerspectiveCamera","position","z","y","DirectionalLight","set","add","heightMap","THREEx","Terrain","allocateHeightMap","simplexHeightMap","geometry","heightMapToPlaneGeometry","heightMapToVertexColor","material","MeshNormalMaterial","wireframe","mesh","Mesh","lookAt","Vector3","scale","x","multiplyScalar","push","delta","now","rotation","render","lastTimeMsec","onWindowResize","outerHeight","aspect","updateProjectionMatrix","requestAnimationFrame","animate","nowMsec","deltaMsec","Math","min","forEach","onRenderFct","addEventListener"],"mappings":";AACA,IAAIA,EAAOC,EAAOC,EAGdC,EAAmB,EACnBC,EAAoB,EACpBC,EAAoB,GAGxBH,EAAW,IAAII,MAAMC,cAAc,CAClCC,WAAY,KAEJC,QAASC,OAAOC,WAAYD,OAAOE,aAG5CC,SAASC,KAAKC,YAAab,EAASc,YAEpChB,EAAQ,IAAIM,MAAMW,MAGlB,IAAIC,EAAc,GAGlBC,OAAS,IAAIb,MAAMc,kBAAkB,GAAIV,OAAOC,WAAgBD,OAAOE,YAAa,GAAK,KACzFO,OAAOE,SAASC,EAAI,GACpBH,OAAOE,SAASE,EAAI,GAGpBtB,EAAQ,IAAIK,MAAMkB,iBAAiB,QAAS,MACtCH,SAASI,IAAI,GAAK,GAAK,GAC7BzB,EAAM0B,IAAKzB,GAGX,IAAI0B,EAAYC,OAAOC,QAAQC,kBAAkB,IAAI,KACrDF,OAAOC,QAAQE,iBAAiBJ,GAChC,IAAIK,EAAWJ,OAAOC,QAAQI,yBAAyBN,GACvDC,OAAOC,QAAQK,uBAAuBP,EAAWK,GAGjD,IAAIG,EAAW,IAAI7B,MAAM8B,mBAAmB,CAAEC,WAAW,IACrDC,EAAO,IAAIhC,MAAMiC,KAAMP,EAAUG,GACrCnC,EAAM0B,IAAKY,GACXA,EAAKE,OAAO,IAAIlC,MAAMmC,QAAQ,EAAE,EAAE,IAGlCH,EAAKI,MAAMnB,EAAI,IACfe,EAAKI,MAAMC,EAAI,EACfL,EAAKI,MAAMpB,EAAI,GACfgB,EAAKI,MAAME,eAAe,IAG1B1B,EAAa2B,KAAK,SAASC,EAAOC,GACjCT,EAAKU,SAASL,GAAK,GAAMG,IAG1B5B,EAAa2B,KAAK,WAEjB3C,EAAS+C,OAAQjD,EAAOmB,UAGzB,IAAI+B,EAAe,KAoBnB,SAASC,IAELzC,OAAOC,YAAcR,GAAoBO,OAAO0C,aAAe/C,IAChEA,EAAoBK,OAAO0C,YAC3BjD,EAAmBO,OAAOC,WAC1BP,EAAoBM,OAAOE,YAE3BO,OAAOkC,OAAS3C,OAAOC,WAAaD,OAAOE,YAC3CO,OAAOmC,yBAEPpD,EAASO,QAAQC,OAAOC,WAAYD,OAAOE,cA7B9C2C,sBAAsB,SAASC,EAAQC,GACtCF,sBAAuBC,GACvBN,EAAeA,GAAgBO,EAAQ,IAAK,GACxCC,IAAAA,EAAYC,KAAKC,IAAI,IAAMH,EAAUP,GACzCA,EAAeO,EACfvC,EAAa2C,QAAQ,SAASC,GAC7BA,EAAYJ,EAAU,IAAMD,EAAQ,SAKtCtD,EAAmBO,OAAOC,WAC1BP,EAAoBM,OAAOE,YAC3BP,EAAoBK,OAAO0C,YAG3B1C,OAAOqD,iBAAiB,SAAUZ","file":"landing.0bd0b9f5.js","sourceRoot":"..","sourcesContent":["// initializes scene, light and renderer variables\nlet scene, light, renderer;\n\n// initializes window sizes \nvar windowInnerWidth = 0;\nvar windowInnerHeight = 0;\nvar windowOuterHeight = 0;\n\n// create renderer and set the size of it\nrenderer\t= new THREE.WebGLRenderer({\n\tantialias\t: true\n});\nrenderer.setSize( window.innerWidth, window.innerHeight );\n\n// appends the render to the body\ndocument.body.appendChild( renderer.domElement );\n// creates the scene\nscene\t= new THREE.Scene();\n\n// initializes empty array\nvar onRenderFcts= [];\n\n// creates a perspective camera at a certain position\ncamera\t= new THREE.PerspectiveCamera(25, window.innerWidth /    window.innerHeight, 0.1, 100);\ncamera.position.z = 15;\ncamera.position.y = 2;\n\n// sets up a light\nlight\t= new THREE.DirectionalLight('white', 1.5)\nlight.position.set(0.5, 0.5, 2)\nscene.add( light )\n\n// creates the terrain\nvar heightMap\t= THREEx.Terrain.allocateHeightMap(256,256)\nTHREEx.Terrain.simplexHeightMap(heightMap)\nvar geometry\t= THREEx.Terrain.heightMapToPlaneGeometry(heightMap)\nTHREEx.Terrain.heightMapToVertexColor(heightMap, geometry)\n\n// THREE material\nvar material\t= new THREE.MeshNormalMaterial({ wireframe: true});\nvar mesh\t= new THREE.Mesh( geometry, material );\nscene.add( mesh );\nmesh.lookAt(new THREE.Vector3(0,1,0));\n\n// scales the scalar\nmesh.scale.y\t= 3.5;\nmesh.scale.x\t= 3;\nmesh.scale.z\t= 0.20;\nmesh.scale.multiplyScalar(10);\n\n// function to be called on every render\nonRenderFcts.push(function(delta, now){\n\tmesh.rotation.x += 0.2 * delta;\n    // mesh.rotation.x = 30.65;\n})\nonRenderFcts.push(function(){\n\t// displays actual scene on page\n\trenderer.render( scene, camera );\n})\n\nvar lastTimeMsec = null;\nrequestAnimationFrame(function animate(nowMsec){\n\trequestAnimationFrame( animate );\n\tlastTimeMsec\t= lastTimeMsec || nowMsec-1000/60\n\tvar deltaMsec\t= Math.min(200 , nowMsec - lastTimeMsec)\n\tlastTimeMsec\t= nowMsec\n\tonRenderFcts.forEach(function(onRenderFct){\n\t\tonRenderFct(deltaMsec/1000, nowMsec/1000)\n\t})\n})\n\n// stores window sizes\nwindowInnerWidth = window.innerWidth;\nwindowInnerHeight = window.innerHeight;\nwindowOuterHeight = window.outerHeight;\n\n// event listener for resize with callback\nwindow.addEventListener('resize', onWindowResize)\n\n// create resize function\nfunction onWindowResize(){\n\t// basically if sizes don't match up then assign actual window sizes to the variables and updateProjectionMatrix in order to take effect \n\tif(window.innerWidth != windowInnerWidth || window.outerHeight != windowOuterHeight){\n\t  windowOuterHeight = window.outerHeight;\n\t  windowInnerWidth = window.innerWidth;\n\t  windowInnerHeight = window.innerHeight;\n  \n\t  camera.aspect = window.innerWidth / window.innerHeight;\n\t  camera.updateProjectionMatrix();\n  \n\t  renderer.setSize(window.innerWidth, window.innerHeight);\n\t}\n  }"]}